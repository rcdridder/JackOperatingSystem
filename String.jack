// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length;
    field int maxLength;
    field int valAns;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLength = maxLength;
        let length = 0;

        if(maxLength = 0) {
            return this;
        }
        else {
            let chars = Array.new(maxLength);
            return this;
        }
    }

    /** Disposes this string. */
    method void dispose() {
        if(maxLength > 0) {
            do chars.dispose();
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let chars[length] = 0;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, j, decPow, value;
        let i = length - 1;
        if(chars[0] = 45) {
            let j = 1;
        }
        else {
            let j = 0;
        }
        let decPow = 1;
        let value = 0;
        while(~(i < j)) {
            let value = value + ((chars[i] - 48) * decPow);
            let decPow = decPow * 10;
            let i = i - 1;
        }
        if(j = 1) {
            return -value;
        }
        else {
            return value;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        while(length > 0) {
            do eraseLastChar();
        }
        if(val < 0) {
            let valAns = val;
            let val = -val;
        }
        else {
            let valAns = 0;
        }
        do setIntRec(val);
        return;
    }

    method void setIntRec(int val) {
        var int lastDigit, valDec, c;

        let valDec = val / 10;
        let lastDigit = val - (10 * valDec);
        let c = lastDigit + 48;
        if(val < 10) {
            if(valAns < 0) {
            do appendChar(45);
            }
            do appendChar(c);
        }
        else {
            do setIntRec(valDec);
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
