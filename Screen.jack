// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static bool currentColour;
    static Array screen, xArray, yArray, binPowArr;

    /** Initializes the Screen. */
    function void init() {
        var int i, j, value;
        let currentColour = true;
        let screen = 16384;

        //Fill x Array
        let i = 0;
        let j = 0;
        let value = 0;
        let xArray = Array.new(512);
        while (i < 512) {
            while (j < 16) {
                let xArray[i] = value;
                let i = i + 1;
                let j = j + 1;
            }
            let value = value + 1;
            let j = 0;
        }

        //Fill y Array
        let i = 1;
        let value = 32;
        let yArray = Array.new(256);
        let yArray[0] = 0;
        while(i < 256) {
            let yArray[i] = value;
            let value = value + 32;
            let i = i + 1;
        }

        //Fill binPowArr
        let i = 0;
        let value = 1;
        let binPowArr = Array.new(15);
        let binPowArr[0] = value;
        while(i < 16 ) {
            let binPowArr[i] = value;
            let value = value + value;
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            let screen[i] = 0;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColour = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, modX;

        let address = screen + xArray[x] + yArray[y];
        let value = Memory.peek(address);
        let modX = binPowArr[x & 15];

        if(currentColour) {
            let value = value | modX;
        }
        else {
            let value = value & ~modX; // xor
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if(x1 = x2) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }
        if(y1 = y2) {
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }   
        do Screen.drawDiagonalLine(x1, y1, x2, y2);
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        if(y1 < y2) {
            while(y1 < y2) {
                do Screen.drawPixel(x, y1);
                let y1 = y1 + 1;
            }
        }
        else {
            while(y2 < y1) {
                do Screen.drawPixel(x, y2);
                let y2 = y2 + 1;
            }
        }
        return;
    }

    function void drawHorizontalLine(int y, int x1, int x2) {
        if(x1 < x2) {
            while(x1 < x2) {
                do Screen.drawPixel(x1, y);
                let x1 = x1 + 1;
            }
        }   
        else {
            while(x2 < x1) {
                do Screen.drawPixel(x2, y);
                let x2 = x2 + 1;
            }
        }
        return;     
    }

    function void drawDiagonalLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff, temp;

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;

        //Switch x1y1, x2,y2
        if(dx < 0) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
            let dx = -dx;
            let dy = -dy;
            }

        //Both numbers are posiive or negative
        if(~(dx < 0) & ~(dy < 0)) { 
            while(~(a > dx) & ~(b > dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        else {
            if(dx < 0) {
                let temp = dy;
            }
            else {
                let temp = -dy;
            }
            while(~(a > dx) & ~(b < dy)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if(diff < 0) {
                    let a = a + 1;
                    let diff = diff + temp;
                }
                else {
                    let b = b - 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(y1 < y2) {
            do Screen.drawHorizontalLine(y1, x1, x2);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt, x1, x2, py;

        let dy = -r;
        while(~(dy = r)) {
            let sqrt = Math.sqrt((r * r) - (dy * dy));
            let x1 = x - sqrt;
            let x2 = x + sqrt;
            let py = y + dy;
            do Screen.drawLine(x1, py, x2, py);
            let dy = dy + 1;
        } 
        return;
    }
}
